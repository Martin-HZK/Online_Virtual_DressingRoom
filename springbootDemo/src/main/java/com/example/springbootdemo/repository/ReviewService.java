package com.example.springbootdemo.repository;

import com.example.springbootdemo.model.Movie;
import com.example.springbootdemo.model.Review;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.stereotype.Service;

/**
 * The ReviewService class to handle the business logic
 */
@Service
public class ReviewService {
    /**
     * The review repository is used to store the review to the database
     */
    @Autowired
    private ReviewRepository reviewRepository;// for storing the review to the database

    /**
     * Template is another way to access the database other than repository
     * This is for forming a dynamic query to do job in the database without using repository
     */
    @Autowired
    private MongoTemplate mongoTemplate;
    /**
     * Create a review for a movie
     * This method take the review in string format as the input and connect to certain movie by imdbId.
     * Each time we call the createReview method, a new review will be created and stored to the array of reviews.
     * The review id is auto-generated by MongoDB
     * @param reviewBody
     * @param imdbId
     * @return
     */
    public Review createReview(String reviewBody, String imdbId) {

        Review review = new Review(reviewBody);
        reviewRepository.insert(review);
        // make an update call on the movie class
        mongoTemplate.update(Movie.class)
                .matching(Criteria.where("imdbId").is(imdbId))
                .apply(new Update().push("reviewIds").value(review))
                .first(); // make sure only get single movie and update that
        return review;
    }
}
